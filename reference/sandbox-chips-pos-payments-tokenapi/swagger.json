{
    "swagger": "2.0",
    "info": {
        "title": "CHIPS Point of Sale: Token Based Payment API",
        "version": "1.0",
        "description": "The CHIPS Payment Network enables registered merchants to create payment request tokens at their till points and point of sales devices. These token can be displayed as QRs which can action payment with various MasterPass enabled payment applications available on the South African payments landscape, for example CHIPS&reg; Money Manager, Zapper, SnapScan and any Masterpass&trade; compliant banking app.\n\n# Overview\nThe below diagram depicts the process flow of a token based payment. \n\n![Point of Sale: Token Based Payment Proccess Flow](https://marketplace.trustlinkhosting.com/images/Providers/CHIPS/POSTokenBasedPayment-ProcessFlow.png)\n\nSee more info on the business processes and technical processes below\n* [business flow description]\n* [API example flow]\n* [API environments]\n\nFor more info on CHIPS&reg; and the Trustlink API Marplace se see:\n* [CHIPS home page](https://chips.co.za)\n* [CHIPS for businesses](https://www.chips.co.za/payment-network/index.php/businesses)\n\n\n# Getting Started\n* Register on the [Trustlink API Marketplace](https://marketplace.trustlinkhosting.com/component/apiportal/registration)\n* Send an email requesting access to the CHIPS Point of Sale: Token Based Payment API to apisales@trustlink.co.za\n\n# Terms and Conditions\nBy using these APIs you agree to the following terms and conditions\n1. [CHIPS Terms and Conditions](http://www.chips.co.za/downloads/CHIPS_Terms_Conditions_2019-07-25.pdf)\n1. [AOS Terms and Conditions](http://www.chips.co.za/downloads/AOS_Terms_and_Conditions_2018-06-26.pdf)\n\n\n\n\n\n",
        "contact": {
            "name": "API Sales",
            "url": "https://marketplace.trustlinkhosting.com",
            "email": "apisales@trustlink.co.za"
        },
        "termsOfService": " https://marketplace.trustlinkhosting.com",
        "license": {
            "name": " Apache 2.0 License",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/pos/payments/tokenapi",
    "paths": {
        "/tokens": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "title": "CHIPS Payment Token Request",
                            "type": "object",
                            "description": "Request payload to generate a CHIPS payment token",
                            "x-tags": [
                                "Payments"
                            ],
                            "properties": {
                                "payeeRefInfo": {
                                    "type": "string",
                                    "description": "Used to uniquely identify thetransaction for the applicable Member as usedinthe external system.",
                                    "example": "online-20200305-INV123304",
                                    "minLength": 0,
                                    "maxLength": 36
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description for the transaction. Will be displayed to the scanner of the QR code.",
                                    "example": "Online Cart Checkout",
                                    "minLength": 0,
                                    "maxLength": 60
                                },
                                "amount": {
                                    "type": "number",
                                    "description": "Amount to generate the payment token for. The amount will be displayed to the token reader in order for payer to confirm. If omitted, the payer can populate their own amount.\n(Format R.cc / R)",
                                    "example": "34.56",
                                    "minimum": 0,
                                    "exclusiveMinimum": false
                                },
                                "expiryTime": {
                                    "type": "string",
                                    "description": "The expiry date and time of the resulting payment request token code. If not specified, then never expire.\n(ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ). ",
                                    "format": "date-time",
                                    "example": "2030-01-01T12:00:00.000+02:00"
                                },
                                "dueDate": {
                                    "type": "string",
                                    "description": "Informational field indicating the date by when the payment is due.\n(ISO8601 yyyy-mm-dd)",
                                    "format": "date",
                                    "example": "2021-11-30"
                                },
                                "payeeCategory1": {
                                    "type": "string",
                                    "description": "User field to categorize the transaction.",
                                    "example": "Online",
                                    "minLength": 0,
                                    "maxLength": 50
                                },
                                "payeeCategory2": {
                                    "type": "string",
                                    "description": "User field to categorize the transaction.",
                                    "example": "Food",
                                    "minLength": 0,
                                    "maxLength": 50
                                },
                                "payeeCategory3": {
                                    "type": "string",
                                    "description": "User field to categorize the transaction.",
                                    "example": "Canned Goods",
                                    "minLength": 0,
                                    "maxLength": 50
                                },
                                "requestId": {
                                    "type": "string",
                                    "description": "The unique reference generated by the external system/application used to identify the request.\nRecommended UUID (ISO/IEC 9834-8:2014)",
                                    "example": "3a71a689-46b9-45d1-8b3d-0f6d38cf2524",
                                    "minLength": 0,
                                    "maxLength": 36
                                },
                                "siteRefInfo": {
                                    "type": "string",
                                    "description": "A reference used by the payee / external system to identify the specific business unit.",
                                    "example": "ONLINE-GROC",
                                    "minLength": 0,
                                    "maxLength": 36
                                },
                                "siteName": {
                                    "type": "string",
                                    "description": "Used to identify the site that created the token request.",
                                    "example": "WebShop",
                                    "minLength": 0,
                                    "maxLength": 100
                                },
                                "useOnce": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Indicator to specify if the resulting token can be used once only or multiple times.",
                                    "enum": [
                                        true,
                                        false
                                    ],
                                    "example": true
                                },
                                "requestTip": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Indicator for payee to specify if tip must be requested.",
                                    "enum": [
                                        true,
                                        false
                                    ],
                                    "example": false
                                },
                                "requestTokenImage": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Indicator for payee to specify if image of token must be provided (in base64 encodedformat)",
                                    "enum": [
                                        true,
                                        false
                                    ],
                                    "example": true
                                },
                                "tokenImageSize": {
                                    "type": "string",
                                    "default": "SMALL",
                                    "description": "The dimensions of the token image requiredin pixels. * LARGE(1024x1024px)\n* MEDIUM(512x512px)\n* SMALL(256x256px)",
                                    "enum": [
                                        "SMALL",
                                        "MEDIUM",
                                        "LARGE"
                                    ],
                                    "example": "MEDIUM"
                                }
                            },
                            "required": [
                                "payeeRefInfo",
                                "description"
                            ]
                        },
                        "description": ""
                    },
                    {
                        "type": "string",
                        "in": "header",
                        "name": "Authorization",
                        "description": "Merchant Device API Key Authentication",
                        "required": true
                    },
                    {
                        "Marketplace API Key": {
                            "type": "apiKey",
                            "description": "Marketplace API Key",
                            "name": "marketplaceKeyId",
                            "in": "header"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "description": "Amount",
                                    "exclusiveMinimum": false,
                                    "minimum": 0,
                                    "type": "number",
                                    "x-nullable": true
                                },
                                "created": {
                                    "description": "Date and time created (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "description": {
                                    "description": "Description",
                                    "maxLength": 60,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "dueDate": {
                                    "description": "Due date (ISO8601 yyyy-mm-dd)",
                                    "format": "date",
                                    "type": "string"
                                },
                                "expiryTime": {
                                    "description": "Expiry date and time (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                    "format": "date-time",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "lastModified": {
                                    "description": "Date and time last modified (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "payeeCategory1": {
                                    "description": "Payee category 1",
                                    "maxLength": 50,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "payeeCategory2": {
                                    "description": "Payee category 2",
                                    "maxLength": 50,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "payeeCategory3": {
                                    "description": "Payee category 3",
                                    "maxLength": 50,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "payeeRefInfo": {
                                    "description": "Payee reference",
                                    "maxLength": 36,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "requestId": {
                                    "description": "Request identifier. Recommended UUID (ISO/IEC 9834-8:201)",
                                    "maxLength": 36,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "requestTip": {
                                    "description": "Request tip",
                                    "type": "boolean",
                                    "x-nullable": true
                                },
                                "siteName": {
                                    "description": "Site name",
                                    "maxLength": 100,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "siteRefInfo": {
                                    "description": "Site reference",
                                    "maxLength": 36,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "status": {
                                    "description": "Status",
                                    "enum": [
                                        "COMPLETED",
                                        "EXPIRED",
                                        "FAILED",
                                        "PENDING",
                                        "REJECTED",
                                        "REVERSED"
                                    ],
                                    "type": "string"
                                },
                                "tokenId": {
                                    "description": "Token identifier",
                                    "maxLength": 10,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "tokenImage": {
                                    "description": "Base64 encoded token image",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "useOnce": {
                                    "description": "Use once",
                                    "type": "boolean",
                                    "x-nullable": true
                                },
                                "uuid": {
                                    "description": "UUID (ISO/IEC 9834-8:201)",
                                    "maxLength": 36,
                                    "minLength": 36,
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            },
                            "required": [
                                "created",
                                "description",
                                "lastModified",
                                "payeeRefInfo",
                                "status",
                                "uuid"
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Merchant Device API Key Authentication": []
                    }
                ],
                "tags": [
                    "Payments"
                ],
                "operationId": "chips_create_payment_token",
                "summary": "Create payment token",
                "description": "Generates a CHIPS payment token. This token can be paid using CHIPS, Masterpass, Zapper or Snapscan. The token can be presented as a QR code for scanning by these payment apps.\n\n"
            },
            "parameters": []
        },
        "/transactions": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "tokenRequestId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "tokenId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "systemRefInfo",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "txRefInfo",
                        "type": "string"
                    },
                    {
                        "format": "date-time",
                        "in": "query",
                        "name": "createdFrom",
                        "type": "string"
                    },
                    {
                        "format": "date-time",
                        "in": "query",
                        "name": "createdUntil",
                        "type": "string"
                    },
                    {
                        "enum": [
                            "CANCELLED",
                            "FINALISED",
                            "PENDING"
                        ],
                        "in": "query",
                        "name": "status",
                        "type": "string"
                    },
                    {
                        "default": 0,
                        "description": "Page number requested",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "default": 200,
                        "description": "Number of entries to include per page",
                        "format": "int32",
                        "in": "query",
                        "name": "size",
                        "type": "integer"
                    },
                    {
                        "default": "ASC",
                        "description": "Sort oder",
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "in": "query",
                        "name": "order",
                        "type": "string"
                    },
                    {
                        "default": "lastModified",
                        "description": "Sort field",
                        "in": "query",
                        "name": "orderBy",
                        "type": "string"
                    },
                    {
                        "type": "string",
                        "in": "header",
                        "name": "Authorization",
                        "description": "Merchant Device API Key Authentication",
                        "required": true,
                        "pattern": ""
                    },
                    {
                        "Marketplace API Key": {
                            "type": "apiKey",
                            "description": "Marketplace API Key",
                            "name": "marketplaceKeyId",
                            "in": "header"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "schema": {
                            "properties": {
                                "pageNumber": {
                                    "description": "Current page number",
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "pageSize": {
                                    "description": "Number of entries per page",
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "totalElements": {
                                    "description": "Total number of entries",
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "totalPages": {
                                    "description": "Total number of pages",
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "values": {
                                    "description": "Page entries",
                                    "items": {
                                        "description": "Page entries",
                                        "properties": {
                                            "amount": {
                                                "description": "Amount",
                                                "exclusiveMinimum": true,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "category1": {
                                                "description": "Category 1",
                                                "maxLength": 50,
                                                "minLength": 0,
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "category2": {
                                                "description": "Category 2",
                                                "maxLength": 50,
                                                "minLength": 0,
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "category3": {
                                                "description": "Category 3",
                                                "maxLength": 50,
                                                "minLength": 0,
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "created": {
                                                "description": "Date and time created (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "description": {
                                                "description": "Description",
                                                "maxLength": 60,
                                                "minLength": 0,
                                                "type": "string"
                                            },
                                            "fees": {
                                                "description": "Fees attracted by the transaction",
                                                "properties": {
                                                    "externalAmount": {
                                                        "description": "External fee amount",
                                                        "exclusiveMinimum": false,
                                                        "minimum": 0,
                                                        "type": "number"
                                                    },
                                                    "internalAmount": {
                                                        "description": "Internal fee amount",
                                                        "exclusiveMinimum": false,
                                                        "minimum": 0,
                                                        "type": "number"
                                                    },
                                                    "totalAmount": {
                                                        "description": "Total fee amount",
                                                        "exclusiveMinimum": false,
                                                        "minimum": 0,
                                                        "type": "number"
                                                    },
                                                    "vatAmount": {
                                                        "description": "VAT amount on total fee",
                                                        "exclusiveMinimum": false,
                                                        "minimum": 0,
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object",
                                                "x-nullable": true
                                            },
                                            "gratuityAmount": {
                                                "description": "Gratuity amount",
                                                "exclusiveMinimum": false,
                                                "minimum": 0,
                                                "type": "number",
                                                "x-nullable": true
                                            },
                                            "lastModified": {
                                                "description": "Date and time last modified (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "message": {
                                                "description": "Message",
                                                "maxLength": 120,
                                                "minLength": 0,
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "movementAmount": {
                                                "description": "Movement amount",
                                                "exclusiveMinimum": false,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "systemRefInfo": {
                                                "description": "System reference",
                                                "maxLength": 36,
                                                "minLength": 0,
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "tokenId": {
                                                "description": "Token identifier",
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "tokenRequestId": {
                                                "description": "Token request identifier",
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "transactionStatus": {
                                                "description": "Transaction status",
                                                "enum": [
                                                    "CANCELLED",
                                                    "FINALISED",
                                                    "PENDING"
                                                ],
                                                "type": "string"
                                            },
                                            "txRefInfo": {
                                                "description": "Transaction reference",
                                                "maxLength": 36,
                                                "minLength": 0,
                                                "type": "string",
                                                "x-nullable": true
                                            },
                                            "uuid": {
                                                "description": "UUID (ISO/IEC 9834-8:201)",
                                                "maxLength": 36,
                                                "minLength": 36,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "amount",
                                            "created",
                                            "description",
                                            "lastModified",
                                            "movementAmount",
                                            "transactionStatus",
                                            "uuid"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Merchant Device API Key Authentication": []
                    }
                ],
                "operationId": "chips_find_transactions_by_criteria",
                "summary": "Get one or more transactions",
                "description": "Find transactions by criteria",
                "tags": [
                    "Payments"
                ]
            },
            "parameters": []
        }
    },
    "definitions": {},
    "securityDefinitions": {
        "Merchant Device API Key Authentication": {
            "type": "basic",
            "description": "The CHIPS Payment Request APIs require Basic Authentication using the merchantUUID and the deviceAPIKey. Thus the Authorization header should contain a base64 encoded concatenation of merchantUUID, colon and deviceAPIKey.\n[More details](https://marketplace.trustlinkhosting.com/chips-merchant-device-auth)"
        },
        "Marketplace API Key": {
            "type": "apiKey",
            "description": "API Key",
            "name": "marketplaceKeyId"
        },
        "in": "header"
    },
    "x-components": {},
    "host": "marketplace-qa.trustlinkhosting.com:8165",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "tags": [
        {
            "name": "Payments"
        },
        {
            "name": "Masterpass"
        }
    ],
    "security": [
        {
            "Marketplace API Key": []
        }
    ],
    "buildtarget": "stoplight"
}